#ifndef MAZE_H_INCLUDED
#define MAZE_H_INCLUDED

/** @defgroup Maze Maze
 * @{
 *
 * Functions related to the maze generation and initialization.
 */

/**
 * @brief Initialize variables and objects for the maze
 * 
 */
void initialize_maze();

/**
 * @brief Draw the maze with the given characteristics.
 * spike_pos is used to know if the traps are activated or not. 
 * 
 * @param maze 
 * @param width 
 * @param height 
 * @param x_move The horizontal displacement of the maze
 * @param y_move The vertical displacement of the maze
 * @param spike_pos Spikes state
 */
void drawMaze(const char *maze, int width, int height, int x_move, int y_move, uint8_t spike_pos);

/**
 * @brief Applies the algorithm in the maze generated by generateMaze.
 * 
 * @param maze 
 * @param width 
 * @param height 
 * @param x 
 * @param y 
 */
void carveMaze(char *maze, int width, int height, int x, int y);

/**
 * @brief Creates the maze with the given sizes. The door is always located in the middle of the first row of the maze. 
 * 
 * @param maze 
 * @param width 
 * @param height 
 */
void generateMaze(char *maze, int width, int height);

/**
 * @brief Add the keys to the maze randomly
 * 
 * @param maze 
 * @param width 
 * @param height 
 */
void addKeys(char *maze, int width, int height);

/**
 * @brief Add traps to the maze array randomly
 * 
 * @param maze 
 * @param width 
 * @param height 
 */
void addTraps(char *maze, int width, int height);

#endif // MAZE_H_INCLUDED
